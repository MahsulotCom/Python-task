# Generated by Django 4.2.11 on 2024-04-02 01:43

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AddressModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=256)),
                ("district", models.CharField(blank=True, max_length=256)),
                ("street", models.CharField(blank=True, max_length=256)),
                ("building_number", models.IntegerField(blank=True, null=True)),
                ("floor", models.IntegerField(blank=True, null=True)),
                ("house_number", models.IntegerField(blank=True, null=True)),
                ("is_main", models.BooleanField(default=False)),
                ("comment_for_courier", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("Customer", "Customer"),
                            ("Super Admin", "Super Admin"),
                            ("Shop Admin", "Shop Admin"),
                            ("Product Admin", "Product Admin"),
                            ("Category Admin", "Category Admin"),
                        ],
                        default="Customer",
                        max_length=32,
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=256)),
                ("last_name", models.CharField(blank=True, max_length=256)),
                (
                    "phone_number",
                    models.CharField(
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="The phone number must be entered in the format: “+99891234567”. Up to 13 digits allowed.",
                                regex="^\\+?1?\\d{9,12}$",
                            )
                        ],
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "male"), ("female", "female")], max_length=16
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("address", models.ManyToManyField(to="user.addressmodel")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
